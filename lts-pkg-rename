#!/usr/bin/env bash

# Script to do renames, replaces, breaks for LTS point updates

########################################################################
# The new stacks will be introduced alongside the stock 12.04 stack and
# will co-exist with them. All of the packages will be renamed to not
# conflict with the packages in the stock 12.04 stack. We will utilize
# mesa's alternatives system to install the updated GL libraries and
# enable them.
#
# Only the server-side components of the X stack will be upgraded, not
# libX11 or any other client-side code.
#
# For package naming, kernel names source packages by appending
# -lts-$VERSION. They don't appear to need to rename binary
# packages since they already include the kernel version; instead I'm
# assuming we would rename binary packages like sources - append
# -lts-$VERSION.
#
# The X.org packages will be renamed following the kernel convention
# ('linux-lts-natty' c.f. bug #806586), to enable them to
# co-exist in the same archive. Thus, the X package names will have
# 'lts-VERSION' appended to them:
#
#   mesa-lts-quixotic
#   xserver-xorg-video-intel-lts-quixotic
#   xserver-xorg-video-intel-dbg-lts-quixotic
#   xorg-server-lts-quixotic
#   xserver-xorg-core-dbg-lts-quixotic
#   xserver-common-lts-quixotic
#
########################################################################
# Copyright (C) 2012 Canonical, Ltd.
# Author:  Bryce W. Harrington
# License: MIT license, same as X
#          (see http://www.opensource.org/licenses/mit-license.php)
########################################################################

set -e

extraversion="~precise1~ppa9.4"

if [ "$0" = "$(basename "$0")" ]; then
    basedir="$(dirname $(readlink -e $(which "$0")))"
else
    basedir="$(dirname $(readlink -e "$0"))"
fi

usage() {
    echo "Usage:  $0 [-hqv] <mapping-file>"
    echo " -h:              This help text"
    echo " -q:              Quell output"
    echo " -v:              Extra verbose output"
    echo " -n:              Only create rules.new and control.new (dry run)"
}

ERR() {
    echo "Error: $*" 2>&1
    exit 1
}

warn() {
    echo "Error: $*" 2>&1
}

msg() {
    if [ $verbose -gt 0 ]; then
	echo "$*"
    fi
}

dbg() {
    if [ $verbose -gt 1 ]; then
	echo "$*"
    fi
}

base_version() {
    buf=${1#*:}          # Strip epoch
    echo ${buf%-*}       # Strip debian version
}

while getopts "h\?qvn" opt $*; do
    case "$opt" in
	h ) usage 0                                ;;
	\?) usage 1                                ;;
	q ) verbose=0                              ;;
	v ) verbose=2                              ;;
	n ) dry="echo"                             ;;
	* ) warn "Unknown option '$opt'"; usage 1  ;;
    esac
done
shift `expr $OPTIND - 1`

rename_mapping_file=$1
if [ -z "${rename_mapping_file}" ]; then
    usage 1
elif [ ! -e "${rename_mapping_file}" ]; then
    ERR "No such file ${rename_mapping_file}"
fi

lts_codename=precise
suffix=$(grep "^xorg" "$1" | cut -d- -f2-)
verbose=1
dry=""

# Determine package name from the changelog
changelog=debian/changelog
if [ ! -e ${changelog} ]; then
    dbg $PWD
    ERR "Could not locate debian/changelog from the current dir"
fi

rules=debian/rules
if [ ! -e ${rules} ]; then
    dbg $PWD
    ERR "Could not locate debian/rules from the current dir"
fi

control=debian/control
if [ ! -e ${rules} ]; then
    msg $PWD
    ERR "Could not locate debian/control from the current dir"
fi

old_package=$(head -n 1 ${changelog} | cut -d' ' -f1)
old_package_version=$(head -n 1 ${changelog} | cut -d' ' -f2)
old_package_version=${old_package_version//[\(\)]/}  # Strip parens
new_package=${old_package}-${suffix}
base_version=$(base_version ${old_package_version})
old_binaries=$(grep ^Package: ${control} | grep -v -- -dbg | cut -f2 -d' ')

if [[ "${old_package}" =~ ${suffix}$ ]]; then
    dbg ${old_package}
    warn "Already renamed"
    exit 0
fi

if [ ${old_package} != "xorg" ]; then
    msg "Renaming the orig.tar.gz..."

    for ext in gz bz2 lzma xz; do
        old_orig="${old_package}_${base_version}.orig.tar.${ext}"
        new_orig="${new_package}_${base_version}.orig.tar.${ext}"
        if [ ! -e "../${old_orig}" ]; then continue; fi
        if [ -e "../${new_orig}" ]; then
            msg "../${new_orig} already exists so not renaming"
        else
            mv -v "../${old_orig}" "../${new_orig}"
        fi
        msg
        break
    done
fi

# Make a backup of changelog
if [ -f debian/changelog.old ]; then
    cp debian/changelog.old debian/changelog
else
    cp debian/changelog debian/changelog.old
fi

msg "Updating the maintainer..."
update-maintainer -q

msg "Adding a changelog entry..."
# ~precise1 is a downgrade so force version
dch --newversion "${old_package_version}${extraversion}" \
    --force-bad-version \
    --package ${new_package} \
    --distribution ${lts_codename} \
    --force-distribution \
    "Rename package for the LTS point update, and add replaces/breaks/provides"

if [ -n "$dry" ]; then
    mv -v debian/changelog debian/changelog.new
    mv debian/changelog.old debian/changelog
else
    rm debian/changelog.old
fi

case "${suffix}" in
    lts-quantal)
        extraconflicts=""
    ;;
    lts-raring)
        extraconflicts="xorg-renamed-package-lts-quantal,"
    ;;
    *)
        ERR "unknown release ${suffix}"
    ;;
esac

extraprovides="xorg-renamed-package, xorg-renamed-package-${suffix},"

# some packages have their own mess to clean up, do so here..
if [ -f "${basedir}/lts-${old_package}-rename" ]; then
    export old_package new_package rename_mapping_file basedir
    export codename lts_codename suffix extraversion extraconflicts extraprovides

    exec "${basedir}/lts-${old_package}-rename"
fi

msg "Processing the control file..."

if [ "${old_package}" = "mesa" ]; then
    ${basedir}/dpkg-control \
        --source-suffix ${suffix} \
        --binary-suffix ${suffix} \
        --mapping-file ${rename_mapping_file} \
        --add-replaces --add-provides --add-conflicts \
        --extra-conflicts "${extraconflicts}" \
        --kill-binaries "libosmesa6,libosmesa6-dev,libgl1-mesa-dri-experimental,libgl1-mesa-dri-experimental-dbg" \
        > ${control}.new
elif [ "${old_package}" = "xorg-server" ]; then
    ${basedir}/dpkg-control \
        --source-suffix ${suffix} \
        --binary-suffix ${suffix} \
        --mapping-file ${rename_mapping_file} \
        --add-replaces --add-provides --add-conflicts \
        --extra-conflicts "${extraconflicts}" \
        --kill-binaries "xdmx,xdmx-tools,xnest,xvfb,xserver-xephyr,xserver-xfbdev,xserver-xorg-core-udeb" \
        > ${control}.new
elif [ "${old_package}" = "x11-xserver-utils" ]; then
    ${basedir}/dpkg-control \
        --source-suffix ${suffix} \
        --binary-suffix ${suffix} \
        --mapping-file ${rename_mapping_file} \
        --add-provides \
        --extra-conflicts "${extraconflicts}, x11-xserver-utils-renamed" \
        --kill-binaries "" \
        > ${control}.new
else
    ${basedir}/dpkg-control \
        --source-suffix ${suffix} \
        --binary-suffix ${suffix} \
        --mapping-file ${rename_mapping_file} \
        --add-replaces --add-provides --add-conflicts \
        --extra-conflicts "${extraconflicts}" \
        --kill-binaries "" \
        > ${control}.new
fi

msg "Checking rules..."
if ! grep -q ${old_package} ${rules}; then
    dbg "${rules} mentions ${old_package}"
    warn "Manual update of ${rules} required"
fi

msg "Renaming binary install, etc. files..."
cp debian/rules debian/rules.new
sed -e "s/PACKAGE[[:space:]]*=.*/&-${suffix}/" -i debian/rules.new

for pkg in ${old_binaries}; do
    newpkg="${pkg}-${suffix}"

    msg "- Renaming ${pkg}.* files to ${newpkg}.*"

    set +e
    files=$(ls debian/${pkg}.*)
    err=$?
    set -e
    if [ $err -ne 0 ]; then
	warn "Failed to list in ${old_package} for ${old_package} -> ${new_package}"
	continue
    fi
    for old_file in $files; do
	new_file=${old_file/${pkg}/${newpkg}}
	$dry mv -v ${old_file} ${new_file}
    # TODO: Maybe using 'rename' would be better?
    done

    # Argh my eyes, so terribly sorry about this
    # substitute $(XXV) for ati
    # dumb rename for packages install rules
    # another dumb rename for doc and bugs

    # dh_strip rules
    # libdrm has a single -p libkms1, fix it to -plibkms1

    # dh_makeshlibs is needed for libdrm
    sed -e "s@\$(XXV)@xserver-xorg-video@g" \
        -e "s@debian/${pkg}/@debian/${newpkg}/@g" \
        -e "s@debian/${pkg}\.@debian/${newpkg}.@g" \
        -e "/dh_strip/s/-p /-p/g" \
        -e "/dh_strip/s/-p${pkg} /-p${newpkg} /" \
        -e "/dh_strip/s/-N${pkg} /-N${newpkg} /" \
        -e "/dh_strip/s/${pkg}-dbg/${newpkg}-dbg/" \
        -e "/dh_makeshlibs/s/${pkg}\\([ ']\\)/${newpkg}\\1/g" \
        -e "/dh_install/s/-p${pkg} /-p${newpkg} /" \
        -e "/dh_install/s/-p${pkg}\$/-p${newpkg}/" \
        -e "s@${newpkg}/usr/share/doc/${pkg}@&-${suffix}@" \
        -e "s@${newpkg}/usr/share/bug/${pkg}@&-${suffix}@" \
        -e "/DEB_DBG_PACKAGE_ALL/s/ ${pkg}-dbg/ ${pkg}-${suffix}-dbg/" \
        -e "/DEB_DH_STRIP_ARGS/s/=${pkg}-dbg/=${pkg}-${suffix}-dbg/" \
	-e "/--link-doc/s/=${pkg}/&-${suffix}/" \
        -i debian/rules.new

    if [ -f "debian/${newpkg}.symbols" ]; then
        sed -e "s/ ${pkg} / ${newpkg} /" -i "debian/${newpkg}.symbols"
    elif [ -n "$dry" -a "debian/${pkg}.symbols" ]; then
        $dry sed -e "s/ ${pkg} / ${newpkg} /" -i "debian/${newpkg}.symbols"
    fi
done

msg "Applying post-rename changes"

# Mesa is fun! :D
if [ "${old_package}" = "mesa" ]; then
    sed -e "s/\\\$\\\$PACKAGE/&-${suffix}/" -i debian/rules.new
    files="$(ls debian/*-i686.*)"
    for x in $files; do
        $dry mv -v "$x" "${x/i686/${suffix}-i686}"
    done
    sed -e "s/--enable-osmesa/--disable-osmesa/" -i debian/rules.new
    $dry sed -e "/NOT_INSTALLED/s@:=@:= dri/usr/include/GL/osmesa.h@" -i debian/not-installed

    # Use sonames for all instances of -ldrm*
    for lib in _radeon _nouveau _intel ""; do
        $dry sed -e "s/-ldrm${lib}/\$(shell \$(PKG_CONFIG) libdrm${lib} --libs)/" -i $(grep -l -r -- -ldrm${lib} src/)
    done
elif [ "${old_package}" = "xorg-server" ]; then
    # Disable the udeb building
    # and fix the abi depends
    sed -e "/ifneq.*-udeb/s/.*/ifeq (1, 0)/" \
        -e "/DH_INSTALL_OPTIONS =/s/-udeb/&-${suffix}/" \
        -e "/-abi-/s/ xserver-xorg-core/&-${suffix}/" \
        -e "s/--enable-dmx/--disable-dmx/" \
        -e "s/--enable-kdrive/--disable-kdrive/" \
        -e "s/--enable-xnest/--disable-xnest/" \
        -e "s/--enable-xvfb/--disable-xvfb/" \
        -e "s/--enable-xephyr/--disable-xephyr/" \
        -e "s/--enable-xfbdev/--disable-xfbdev/" \
        -i debian/rules.new

    # Kill of xvfb-run too
    sed -e "/xvfb-run/d" -e "/^.PATH=/d" -e "/Xvfb/d" -i debian/rules.new

    # And fix the xsf substvars
    $dry sed -e "s/-udeb/&-${suffix}/g" \
             -e "s/xserver-xorg-core/&-${suffix}/g" \
             -e "/dbg/s/-dev/&-${suffix}/" \
             -e "/dbg/s/-all/&-${suffix}/" \
             -i debian/local/dh_xsf_substvars

    if [ -f "debian/xserver-xorg-core-${suffix}.links" ]; then
        ERR "links file for xserver-xorg-core already exists!"
    fi
    x="usr/share/bug/xserver-xorg-core-${suffix}/script usr/share/bug/xserver-xorg-core/script"
    if [ -n "$dry" ]; then
        $dry "echo ${x} >> debian/xserver-xorg-core-${suffix}.links"
    else
        echo ${x} >> debian/xserver-xorg-core-${suffix}.links
    fi

    # xserver-common is weird, we cannot completely rename it, since we need the
    # manpage from the original version, so fix things up..

    # add diversion for protocol.txt
    for n in ${basedir}/lts-patches/xserver-common.*; do
        sed -e s/@SUFFIX@/${suffix}/g < $n > debian/$(basename $n)
    done
    for n in debian/xserver-common.*; do mv $n ${n/xserver-common/xserver-common-${suffix}}; done

    # kill the manpage off from xserver-common
    $dry sed -e "/man/d" -i debian/xserver-common-${suffix}.install
    $dry sed -e "/appman_PRE/s/=.*/=/" -i man/Makefile.am

    # now add in a hack to make xserver-common provide/replace/conflict xserver-common-renamed
    sed -e "s@xserver-common,@xserver-common-renamed,@" -i debian/control.new
    sed -e "s@xserver-common\$@xserver-common-renamed@" -i debian/control.new

    # and add depend back on xserver-common for manpage
    sed -e "s@x11-common@xserver-common, &@" -i debian/control.new

    # Special case, allow mesa-common-dev to satisfy depends for xserver-xorg-dev too..
    # This is to make sure that the normal mesa-dev packages work alongside with the
    # new stack, since some packages only work with the old libgl dev packages
    sed -e "s/mesa-common-dev-${suffix},/mesa-common-dev-${suffix} | mesa-common-dev (>= 0~),/" -i debian/control.new

    # add -nr back as alias to -background none
    $dry cp ${basedir}/lts-patches/xorg-server-legacy-bgnone.patch debian/patches

    $dry echo xorg-server-legacy-bgnone.patch | $dry tee -a debian/patches/series
elif [ "${old_package}" = "xserver-xorg-video-intel" ]; then

    # Can no longer rely on real name, so fixup
    $dry sed -e 's/-ldrm_intel/@DRMINTEL_LIBS@/' -i src/xvmc/Makefile.am
elif [ "${old_package}" = "xserver-xorg-video-fbdev" ]; then
    sed -e "/dh_install/s/\$(PACKAGE)-udeb/xserver-xorg-video-fbdev-udeb-${suffix}/" -i debian/rules.new
elif [ "${old_package}" = "x11-xserver-utils" ]; then
    # Only build xrandr
    sed -e "/PACKAGE/s/=.*/&-${suffix}/" \
        -e "/^DEF_SUBDIRS/s/=.*/=xrandr/" \
        -i debian/rules.new

    # fixup provides, and add depends back on unrenamed package
    # must conflict on x11-xserver-utils-renamed, since we cannot
    # have 2 of those at the same time due to diversions
    sed -e "/^Provides:/s/ x11-xserver-utils/&-renamed /" \
        -e "/^Depends:/s/\$/, x11-xserver-utils (>= 0~)/" \
        -i debian/control.new

    # Disable building manpage + xkeystone
    sed -e "/^bin_SCRIPTS/s/=.*/=/" -e "/^SUBDIRS/s/=.*/=/" -i xrandr/Makefile.*

    # Supress things we don't install
    sed -e "/app-defaults/d" -e "/man/d" \
        -i debian/x11-xserver-utils-${suffix}.install

    # add diversion scripts
    for n in ${basedir}/lts-patches/x11-xserver-utils.*; do
        sed -e "s/@SUFFIX@/${suffix}/g" < $n > debian/$(basename $n)
    done
    for n in debian/x11-xserver-utils.*; do mv $n ${n/x11-xserver-utils/x11-xserver-utils-${suffix}}; done
fi

$dry mv debian/rules.new debian/rules
$dry mv ${control}.new ${control}

msg "Generating changes file..."
$dry debuild -S -sa

msg "${old_package} now renamed to ${new_package}"
