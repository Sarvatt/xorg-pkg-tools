#!/bin/bash

# Include the bash library functions
. $(dirname $0)/xorg-pkg-tools.lib

usage() {
    write_msg "Usage: $0 <commits-file> <debian-dir>"
    exit 1
}

# Constructs a version string for a given version control system commit
vcs_snapshot_version_string() {
    VCS_TYPE=$1
    COMMIT=$2
    DATE_PREFIX="+"

    # Get the released package version for this branch
    if [ -z "$PACKAGE_VERSION" ]; then
        eval `grep PACKAGE_VERSION= configure`
    fi
    [ -z "$PACKAGE_VERSION" ] && die "No PACKAGE_VERSION in configure"

    # Get the date for the most recent git commit
    DATE=$(git_last_commit_date)

    echo "${PACKAGE_VERSION}${DATE_PREFIX}${VCS_TYPE}${DATE}.${COMMIT}"
}


# Generate a package from an upstream commit, for a given
# distro version and a given debian directory
git_pkg() {
    COMMIT=$1
    DEBIAN=$2

    DISTRO="UNRELEASED"
    ORIGDIR=${REPO}.orig

    echo "BASEDIR:  "$BASEDIR
    echo "COMMIT:   "$COMMIT
    echo "DISTRO:   "$DISTRO
    echo "DEBIAN:   "${DEBIAN%/}
    echo "REPO:     "${REPO/$BASEDIR/[BASEDIR]/}
    echo "ORIGDIR:  "${ORIGDIR/$BASEDIR/[BASEDIR]/}
    echo "----------"

    # Update the git repository to the commit id
    cd ${REPO}
    msg "Resetting to $COMMIT"
    git reset --hard $COMMIT || return $?

    # Copy to new working directory
    copy_dir ${REPO} ${ORIGDIR} || return $?
    cd ${ORIGDIR}

    # Update autoconfage if desired
    if [ ${UPDATE_AUTOCONF} ] ; then
        ./autogen.sh || return $?
    fi
    rm -rf autom4te/ .git 
    # TODO:  Remove autom4te, cache, .git, etc.

    # Set the version string
    GITVER=$(vcs_snapshot_version_string "git" $COMMIT)
    VERSION=${EPOCH}${GITVER}${ADDVERSION}

    # Create the source dir
    SOURCE=${BASEDIR%/}/${PKG}-${GITVER}.orig
    copy_dir ${ORIGDIR} ${SOURCE} || return $?
    rm -rf ${ORIGDIR} || return $?

    # TODO:  Above this line should be one function, below another

    # Create the target dir
    TARGET=${BASEDIR%/}/${PKG}-${GITVER}
    copy_dir ${SOURCE} ${TARGET} || return $?
    cd ${TARGET}

    # Copy in the given debian/ directory
    copy_dir ${BASEDIR%/}/${DEBIAN%/}/ ${TARGET}/debian || return $?

    # Add changelog entry
    msg "Adding changelog entry via dch..."
    dch -b --distribution ${DISTRO} --newversion ${VERSION} \
        "Checkout from git up to $COMMIT ($date)"
    if [ ! $? ] ; then
        warn "dch:  Failed to add changelog entry"
        return $?
    fi

    # Create package
    msg "debuild -sa -S ${AUTOSIGN:+-k$AUTOSIGN}"
    debuild -sa -S ${AUTOSIGN:+-k$AUTOSIGN} || warn "debuild: $?"

    # Generate JSON output file
    cat > ${TARGET}.json <<EOF
{
    "pkg":          "${PKG}",
    "version":      "${VERSION}",
    "commit":       "${COMMIT}",
    "debian":       "${DEBIAN%/}",
    "target":       "${TARGET/$BASEDIR/}",
    "pubkey":       "${AUTOSIGN}",
    "dependencies": ""
}
EOF
    echo "VERSION:  $VERSION"
    return 0
}

# Handle command-line parameters
COMMITS_FILE=$1
DEBIAN_DIR=$2
[ -z "${COMMITS_FILE}" ] && usage
[ -z "${DEBIAN_DIR}" ] && usage

PKG=${COMMITS_FILE%.commits}
if [ ! -e "${PKG}.config" ] ; then
   echo "Error:  Cannot find ${PKG}.config."
   exit 1
fi
. ${PKG}.config

BASEDIR=$(abspath "${COMMITS_FILE}")
if [ ! -d ${BASEDIR} ]; then
    die "directory ${BASEDIR} not found"
fi

REPO="${BASEDIR%/}/${GIT_DIR}"

exec < ${COMMITS_FILE}
while read line ; do
    commit=${line%% *}
    name=${line/$commit/}
    name=${name/ /}
    [ -z "${commit}" ] && continue
    case $commit in
        \#* ) continue ;;
    esac

    LOGFILE=${PKG}-${commit}.log
    git_pkg ${commit} ${DEBIAN_DIR} | tee ${BASEDIR}/$LOGFILE 2>&1
    if [ ! $? ] ; then
        msg "FAILED"
    else
        msg "DONE"
    fi
    msg ""

done

# TODO: Print a summary of success/failures
# TODO: Running ./autogen.sh requires newer dependency versions than may
#       be installed on the host