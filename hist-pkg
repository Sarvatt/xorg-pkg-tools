#!/bin/bash

# Include the bash library functions
. $(dirname $0)/xorg-pkg-tools.lib

# TODO:  Load this from a user config file
AUTOSIGN=${AUTOSIGN:-55955A6B}

usage() {
    write_msg "Usage: $0 <commits-file> <debian-dir>"
    exit 1
}

# Handle command-line parameters
COMMITS_FILE=$1
DEBIAN_DIR=$2
[ -z "${COMMITS_FILE}" ] && usage
[ -z "${DEBIAN_DIR}" ] && usage

PKG=${COMMITS_FILE%.commits}
if [ ! -e "${PKG}.config" ] ; then
   echo "Error:  Cannot find ${PKG}.config."
   exit 1
fi
. ${PKG}.config

BASEDIR=$(dirname "${COMMITS_FILE}")
if [ ! -d ${BASEDIR} ]; then
    die "directory ${BASEDIR} not found"
fi

REPO="${BASEDIR}/${GIT_DIR}"

# Constructs a version string for a given version control system commit
vcs_snapshot_version_string() {
    VCS_TYPE=$1
    COMMIT=$2
    DATE_PREFIX="+"

    # Get the released package version for this branch
    if [ -z "$PACKAGE_VERSION" ]; then
        eval `grep PACKAGE_VERSION= configure`
    fi
    [ -z "$PACKAGE_VERSION" ] && die "No PACKAGE_VERSION in configure"

    # Get the date for the most recent git commit
    DATE=git_last_commit_date

    echo "${PACKAGE_VERSION}${DATE_PREFIX}${VCS_TYPE}${DATE}.${COMMIT}"
}


# Generate a package from an upstream commit, for a given
# distro version and a given debian directory
git_pkg() {
    COMMIT=$1
    DEBIAN=$2

    echo "COMMIT:  $COMMIT"
    echo "DEBIAN:  $DEBIAN"
    echo "REPO:    $REPO"

    # Update the git repository to the commit id
    cd ${REPO}
    git reset --hard $COMMIT

    ORIGDIR=${REPO}.orig
    echo "Origdir: $ORIGDIR"

    # Copy to new working directory
    copy_dir ${REPO} ${ORIGDIR}
    cd ${ORIGDIR}
    return

    # Update autoconfage if desired
    [ ${UPDATE_AUTOCONF} ] && ./autogen.sh

    # Set the version string
    GITVER=`vcs_snapshot_version_string "git" $COMMIT`
    msg $GITVER

    # Create the source dir
    SOURCE=${BASEDIR}/${PKG}-${GITVER}.orig
    copy_dir ${ORIGDIR} ${SOURCE}
    rm -rf ${ORIGDIR}

    # TODO:  Remove autom4te, cache, .git, etc.
    # TODO:  Doesn't the tarball need generated at this point?
    # TODO:  Above this line should be one function, below another

    # Create the target dir
    TARGET=${BASEDIR}/${PKG}-${GITVER}
    copy_dir ${SOURCE} ${TARGET}
    cd ${TARGET}

    # Copy in the given debian/ directory
    copy_dir ${DEBIAN} ${TARGET}/

    # Add changelog entry
    msg "Adding changelog entry via dch..."
    dch -b --distribution UNRELEASED --newversion \
        ${EPOCH}${GITVER}${ADDVERSION} \
        "Checkout from git up to $COMMIT ($date)" \
        || die "dch: $?"

    # Create package
    msg "debuild -sa -S"
    debuild -sa -S -k${AUTOSIGN}

    # Generate JSON output file
    echo  > ${TARGET}.json <<EOF
{
    "pkg":          "${PKG}",
    "commit":       "${COMMIT}",
    "date":         "${DATE}",
    "debian":       "${DEBIAN}",
    "source":       "${SOURCE}",
    "target":       "${TARGET}",
    "dependencies": ""
}
EOF
}

exec < ${COMMITS_FILE}
while read commit ; do
    [ -z "${commit}" ] && continue

    echo "Processing $commit..."
    continue
    git_pkg ${commit} ${DEBIAN_DIR} | tee ${BASEDIR}/$commit-pkg.log 2>&1
    if [ $? = 0 ]; then
        msg "Processing $commit succeeded"
        msg ""
    else
        msg "Processing $commit failed"
        msg ""
    fi

done

