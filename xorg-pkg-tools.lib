# xorg-pkg-tools.lib
#
# Library of general purpose bash routines to share amongst
# the xorg-pkg-tools scripts.
#
# All routines in this library must not require user interaction.

# Defaults
QUIET=${QUIET:-0}

########################################################################
## General Purpose Routines
write_msg() {
    echo "$*" | fold -s -w "${COLUMNS:-80}"
}

msg() {
    if [ ${QUIET:-0} -lt 1 ]; then
        write_msg "$*"
    fi
}

warn() {
    write_msg "Warning:  $*" 1>&2
}

die() {
    write_msg "ERROR:  $*" 1>&2
    exit 1
}

is_installed() {
    prog=$1
    need=$2
    /usr/bin/which $prog > /dev/null 2>&1
    err=$?
    if [ ! $err = 0 ]; then
        warn "Could not $need because $prog is not installed ($err)"
        return $err
    fi
    return 0
}

# Recursively copies a directory, preserving timestamps
copy_dir() {
    FROM=$1
    TO=$2
    if [ -e ${TO} ]; then
        warn "Removing existing $DIR dir"
        rm -rf ${TO}
    fi

    msg "cp -a ${FROM} ${TO}"
    cp -a ${FROM} ${TO}
}


########################################################################
## Git Routines

# Prints the branch id with leading 'v' removed
git_branch_id() {
    branch=$1
    branch_id=$((git describe $branch))
    echo ${branch_id#v}
}

# Returns date of the last git commit
git_last_commit_date() {
    dateline=$(git log | grep Date | head -n 1)
    date=$(echo $dateline | sed -e "s/^Date: *\([\+\-]*\).*/\1/p;T;q")
    echo `date +%Y%m%d -d "$date"`
}

########################################################################
## Xorg-specific Routines

# Return the fdo form of a debian package name
debpkg_to_fdopkg() {
    pkg=$1

    if [ "$pkg" = "libdmx" -o \
         "$pkg" = "libfontenc" -o \
         "$pkg" = "liblbxutil" -o \
         "$pkg" = "libpciaccess" -o \
         "$pkg" = "libxkbui" -o \
         "$pkg" = "libxkbfile" -o \
         "$pkg" = "libxtrans" ]; then
        echo "$pkg"
        return
    fi

    if [ "$pkg" = "libdrm" -o "$pkg" = "drm-snapshot" ]; then
        echo "drm"
        return
    fi

    echo ${pkg} \
    | sed -e "s/^xorg-server$/xserver/" \
        | sed -e "s/^xserver-xorg-/xf86-/" \
        | sed -e "s/^x11proto-core$/x11proto/" \
        | sed -e "s/^x11proto-\(.*\)$/\1proto/" \
        | sed -e "s/^xfonts-encodings$/encodings/"\
        | sed -e "s/^libfs$/libFS/" \
        | sed -e "s/^libice$/libICE/" \
        | sed -e "s/^libsm$/libSM/" \
        | sed -e "s/^libxcalibrate$/libXCalibrate/" \
        | sed -e "s/^libxres$/libXRes/" \
        | sed -e "s/^libxscrnsaver$/libXScrnSaver/" \
        | sed -e "s/^libxtrap$/libXTrap/" \
        | sed -e "s/^libxprintapputil$/libXprintAppUtil/" \
        | sed -e "s/^libxvmc$/libXvMC/" \
        | sed -e "s/^libxprintutil$/libXprintUtil/" \
        | sed -e "s/^lib\([a-z]\)/lib\U\1/" \
        | sed -e "s/^lib\(.*\)wm$/lib\1WM/"
}

# Return the debian form of a freedesktop.org Xorg package name
# NOTE:  This doesn't handle grouped packages (like xapps and fonts)
fdopkg_to_debpkg() {
    echo ${1} \
        | sed -e "s/^xserver$/xorg-server/" \
        | sed -e "s/^xf86-/xserver-xorg-/" \
        | sed -e "s/^x11proto$/x11proto-core/" \
        | sed -e "s/^\(.*\)proto$/x11proto-\1/" \
        | sed -e "s/^encodings$/xfonts-encodings/" \
        | tr A-Z a-z
}

# Determines the corresponding git dir for a given fdo package
fdogitdir_for_fdopkg() {
    fdopkg=$1
    if [ -z "${fdopkg}" ]; then
        echo ""
    elif [ ${fdopkg} = "pixman" ]; then
        echo ""
    elif [ ${fdopkg} = "xserver" ]; then
        echo "xorg"
    elif [ ${fdopkg} = "drm" -o ${fdopkg} = "mesa" ]; then
        echo "mesa"
    elif [ ${fdopkg} = "xf86-video-nouveau" ]; then
        echo "nouveau"
    elif [ ${fdopkg} = "xf86-video-avivo" ]; then
        echo "avivo"
    elif [ ${fdopkg#xf86-} != ${fdopkg} ]; then
        echo "xorg/driver"
    elif [ ${fdopkg#lib} != ${fdopkg} ]; then
        echo "xorg/lib"
    elif [ ${fdopkg%proto} != ${fdopkg} ]; then
        echo "xorg/proto"
    elif [ ${fdopkg} = "bitmaps" -o ${fdopkg} = "cursors" ]; then
        echo "xorg/data"
    elif [ ${fdopkg} = "xorg-docs" -o \
        ${fdopkg} = "xorg-sgml-doctools" ]; then
        echo "xorg/doc"
    else
        # Hard to say, could be xorg/app, xorg/font, or xorg/util
        die "Unknown Freedesktop git directory"
    fi
}

# Determines Debian git subdir for the debian package
debgitdir_for_debpkg() {
    debpkg=$1

    if [ -z "${debpkg}" ]; then
        echo ""
    elif [ ${debpkg} = "xorg-server" ]; then
        echo "pkg-xorg/xserver"
    elif [ ${debpkg#xserver-xorg-} != ${debpkg} ]; then
        echo "pkg-xorg/driver"
    elif [ ${debpkg#lib} != ${debpkg} -o ${debpkg} = "mesa" -o \
        ${debpkg} = "pixman" -o ${debpkg} = "xft" -o \
        ${debpkg} = "xtrans" -o ${debpkg} = "drm-snapshot" ]; then
        echo "pkg-xorg/lib"
    elif [ ${debpkg#x11proto-} != ${debpkg} ]; then
        echo "pkg-xorg/proto"
    elif [ ${debpkg} = "xbitmaps" -o ${debpkg} = "xcursors-themes" -o \
        ${debpkg} = "xkb-data" ]; then
        echo "pkg-xorg/data"
    elif [ ${debpkg} = "xorg-docs" -o \
        ${debpkg} = "xorg-sgml-doctools" ]; then
        echo "pkg-xorg/doc"
    elif [ ${debpkg/compiz/} != ${debpkg} ]; then
        echo "pkg-xorg/bling"
    elif [ ${debpkg#x11-} != ${debpkg} ]; then
        # Not a complete listing - but this should get the grouped app pkgs
        # which are the main things we care about.
        echo "pkg-xorg/app"
    elif [ ${debpkg} = "xsfb" -o ${debpkg} = "doc-hackers" ]; then
        echo "pkg-xorg"
    elif [ ${debpkg} = "xorg" ]; then
        echo "pkg-xorg/debian"
    else
        # Hard to say, could be xorg/app, xorg/font, or xorg/util
        die "Unknown Debian git directory"
    fi
}

get_debian_version() {
    pkg=$1
    dpkg -l $pkg  | cat \
        | egrep '^ii' \
        | sed -e "s/ \+/ /g" \
        | cut -d' ' -f 3
}

get_installed_version() {
    get_debian_version $1 \
        | sed -e "s/^.*+//" \
        | cut -d- -f1 \
        | sed -e "s/^[0-9]://" \
        | sed -e "s/ubuntu.*$//"
}


# Check for existence if given driver is present
check_for_driver()
{
    driver=$1
    if xdpyinfo | grep -q $driver ; then
        msg "Checking for $driver: present."
        return 0;
    else
        msg "Checking for $driver: missing."
        return 1;
    fi
}

get_xorg_drivers() {
    pid=`pidof X`
    if [ -z "$pid" ]; then
        echo "Error:  X is not running"
        return 1
    fi
    cat /proc/$pid/smaps | \
        egrep '_drv.so|_dri.so' | \
        cut -d '/' -f 7 | \
        cut -d "_" -f 1 | \
        uniq
}

# Tests if the given pciids are in numerical order from least to
# greatest (e.g., $a <= $b <= $c <= ...)
pciids_in_order() {
    lastid=0
    for pciid in $* ; do
        # Strip embedded : and convert hex to dec
        id=$((0x${pciid/:/}))
        if [ $id -lt $lastid ]; then
            return 1
        fi
        lastid=$id
    done
    return 0
}
