                    --== Historical Snapshotter ==--

hist-snap is a set of tools for creating a collection of past git
snapshots of a given package.  This is useful for testing for when a
given regression entered upstream, when one normally would need to do a
git-bisect search.

Initialize git repositories
===========================
The hist-add tool can be used to create the git repositories that the
tools need, and to generate a config file for the other hist-* tools to
use.  For example:

 mkdir snapshots
 cd snapshots

 # -intel driver
 hist-add -p xserver-xorg-video-intel \
          -d xf86-video-intel \
          -e 2: \
          -r git://git.freedesktop.org/git/xorg/driver/xf86-video-intel \
          -t xf86-video-intel
 # -ati driver
 hist-add -p xserver-xorg-video-ati \
          -d xf86-video-ati \
          -e 1: \
          -r git://git.freedesktop.org/git/xorg/driver/xf86-video-ati \
          -t xf86-video-ati
 # -nv driver
 hist-add -p xserver-xorg-video-nv \
          -d xf86-video-nv \
          -e 1: \
          -r git://git.freedesktop.org/git/xorg/driver/xf86-video-nv \
          -t nv
 # -evdev driver
 hist-add -p xserver-xorg-input-evdev \
          -d xf86-input-evdev \
          -e 1: \
          -r git://git.freedesktop.org/git/xorg/driver/xf86-input-evdev \
          -t xf86-input-evdev

The general form is:

 hist-add -p <package-name> \
          -d <git-directory-name> \
          -e <epoch> \
          -r <git-repo> \
          -t <tag-pattern>

The the epoch is the "N:" prefix present on many Xorg package versions,
which can be checked via 'apt-get madison <package>'.  The tag-pattern
is text typically used in upstream's version tags; review `git tags` to
get a sense for how upstream tags their releases.

All of this information is stored in the *.config file, which can be
customized further as needed.


Generating git commit list
==========================
Next step is to generate the listing of git commits to be pulled and
built:

 hist-mkcommits xserver-xorg-video-intel.config

This results in a *.commits file containing a listing of commits to be
packaged, for passing to hist-pkg in the next step.  It can be modified
further, such as splitting it into multiple files to allow running
hist-pkg with different arguments against different portions of the git
tree history.


Create packaging
================
The git-pkg script can be used to generate the packaging for a given
commit id.  hist-pkg is a wrapper script around this, which runs git-pkg
for all the git commits generated in the previous step.

 hist-pkg xserver-xorg-video-intel.commits ./my-debian-dir

The second argument is a debian directory to copy into the package.  Any
customizations for the build (such as dependencies, patches, and so on)
can be put into the debian directory and passed.


Build packages
==============
Once the packaging is generated, the packages can be built into debs
using hist-build, which calls pball in turn.  These scripts use pbuilder
configured for multi-arch, multi-dist building.

 hist-build xserver-xorg-video-intel



